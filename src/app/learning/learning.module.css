.learningContent {
  flex: 1;
  display: flex;
  flex-direction: column;
  max-width: 100%; 
  overflow: hidden;
  min-height: calc(100vh - 3rem); /* Adjusted to match container padding */
  background-color: #f5f4ed;
  padding-bottom: 90px; /* or whatever your footer height is + a little extra */
}

.backButton {
  background: none;
  border: none;
  color: var(--text-medium);
  cursor: pointer;
  padding: 8px;
  border-radius: 8px;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  gap: 6px;
  font-size: var(--font-size-lg); /* Icon size */
}

.backText {
  font-size: var(--font-size-sm);
  font-weight: 600;
  margin-left: 2px;
  display: none; /* Hide text on mobile */
}

.backButton:hover {
  background-color: var(--background-medium);
  color: var(--text-dark);
}

.progressBar {
  flex: 1;
  height: 8px;
  background-color: var(--background-medium);
  border-radius: 20px;
  overflow: hidden;
  border: none;
}

.progressFill {
  height: 100%;
  background: linear-gradient(90deg, #4CAF50, #8BC34A);
  border-radius: 20px;
  transition: width 0.5s cubic-bezier(0.4, 0, 0.2, 1);
}

.headerActions {
  display: flex;
  align-items: center;
  gap: 12px;
  margin-left: auto; /* Pushes actions to the right */
}

.heartsContainer {
  display: flex;
  align-items: center;
  gap: 4px;
  color: var(--error-red);
  font-size: var(--font-size-lg); /* Heart icon size */
}
.heartsContainer span { /* Optional: Add heart count */
  font-size: var(--font-size-base);
  font-weight: 700;
  color: var(--error-red);
  margin-left: 2px;
}

/* ----- Main Content Area ----- */

.lessonTitle {
  font-size: 1.75rem; /* Changed from 28px */
  font-weight: 700;
  color: var(--text-dark);
  margin-bottom: 1.5rem; /* Changed from 24px */
  text-align: center;
}

.learningArea {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: clamp(1.25rem, 4vw, 2rem); /* More responsive gap */
}

/* ----- Learning Slide Specific ----- */
.learningSlideLayout {
  display: grid;
  grid-template-columns: 1fr;
  gap: 1.5rem; /* Changed from 24px */
  align-items: start;
  padding: 1rem; /* Added padding */
}

@media (min-width: 768px) {
  .learningSlideLayout {
    grid-template-columns: 1fr 1.5fr;
  }
}

.learningVisualColumn {
  position: relative;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 20px;
  z-index: 1;
}

.learningVisualColumn img {
  width: 100%;
  max-width: 400px;
  height: auto;
  border-radius: 16px;
  box-shadow: 0 6px 20px rgba(0,0,0,0.1);
  margin: 0 auto;
  display: block;
  border: 1px solid var(--border-light);
  transition: transform 0.2s ease;
}

.exampleImageContainer {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 1.25rem; /* Changed from 20px */
  margin-top: 1.25rem; /* Changed from 20px */
  padding: 1.5rem; /* Changed from 25px */
  background: rgba(255, 255, 255, 0.95);
  border-radius: 1.25rem; /* Changed from 20px */
  position: relative;
  z-index: 2;
  width: 100%;
  max-width: 600px;
  margin-left: auto;
  margin-right: auto;
  backdrop-filter: blur(10px);
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1),
              0 5px 15px rgba(0, 0, 0, 0.05);
}

.exampleImage {
  width: 100%;
  height: 160px;
  object-fit: contain;
  background-color: var(--white);
  padding: 20px;
  border-radius: 16px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
  cursor: pointer;
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  border: 1px solid rgba(0, 0, 0, 0.05);
  position: relative;
  overflow: hidden;
  display: flex;
  align-items: center;
  justify-content: center;
}

.exampleImage::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(
      135deg,
      rgba(255, 255, 255, 0.2) 0%,
      rgba(255, 255, 255, 0.05) 100%
  );
  z-index: 1;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.exampleImage:hover {
  transform: translateY(-8px) scale(1.05) rotate(2deg);
  box-shadow: 0 20px 30px rgba(0, 0, 0, 0.1),
              0 5px 15px rgba(0, 0, 0, 0.05);
  z-index: 2;
}

.exampleImage:hover::before {
  opacity: 1;
}

/* ----- Mascot ----- */
.mascotContainer {
  display: flex;
  gap: 1.25rem; /* Changed from 20px */
  align-items: flex-start;
  margin-bottom: 1.5rem; /* Changed from 24px */
}

.mascotImageContainer {
  width: 80px; /* Adjust size as needed */
  height: 100px;
  flex-shrink: 0; /* Prevent mascot from shrinking */
  display: flex;
  align-items: flex-end; /* Mascot sits at bottom of its container */
  margin-left: 15px; /* Space between bubble and mascot */
}

.mascotImage {
  width: 120px;
  height: 120px;
  object-fit: contain;
  margin-bottom: -20px; /* Pull up slightly to overlap with speech bubble */
}

.mascotSpeechBubble {
  flex: 1;
  background-color: #f8f9fa;
  border-radius: 1rem; /* Changed from 16px */
  padding: 1.25rem; /* Changed from 20px */
  position: relative;
  border: 1px solid #e9ecef;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

/* Speech bubble tail */
.mascotSpeechBubble::after {
  content: '';
  position: absolute;
  left: 100%; /* Position tail to the right of the bubble */
  top: 30px; /* Adjust vertical position */
  border-top: 15px solid transparent;
  border-bottom: 15px solid transparent;
  border-left: 15px solid #e7f8ff; /* Pointing left from bubble */
  filter: drop-shadow(1px 1px 1px rgba(0,0,0,0.03));
}

.mascotSpeechBubble p {
  margin: 0 0 10px 0; /* Space between paragraphs */
  font-size: var(--font-size-base); /* Responsive base font size */
  line-height: 1.6;
  color: var(--text-dark);
}
.mascotSpeechBubble p:last-child {
  margin-bottom: 0; /* Remove margin from last paragraph */
}

.audioButton {
  background-color: var(--primary-blue);
  color: var(--white);
  border: none;
  border-radius: 10px;
  padding: 8px 14px;
  font-size: var(--font-size-sm); /* Slightly smaller font */
  font-weight: 600;
  cursor: pointer;
  display: inline-flex; /* Align icon and text nicely */
  align-items: center;
  gap: 8px;
  margin-top: 15px; /* Space above the button */
  transition: background-color 0.2s ease, transform 0.1s ease;
  border-bottom: 2px solid var(--primary-blue-dark);
}

.audioButton:hover {
  background-color: var(--primary-blue-dark);
}
.audioButton:active {
    transform: translateY(1px); /* Subtle press effect */
    border-bottom-width: 1px;
}
/* Animation for when audio is playing */
.audioButtonPlaying {
    animation: pulse 1.5s infinite;
}

/* ----- Drag and Drop Specific ----- */
.dragDropInstruction {
  font-size: var(--font-size-base);
  color: var(--text-medium);
  text-align: center;
  margin-bottom: 15px; /* Reduced margin */
  font-weight: 500;
}
.dragDropArea {
  display: flex;
  flex-direction: column;
  gap: 1.5rem; /* Changed from 2rem */
  width: 100%;
  padding: 1.5rem; /* Changed from 2rem */
  align-items: center;
}
.draggableSourceList {
  display: flex;
  gap: 0.75rem;
  flex-wrap: wrap;
  justify-content: center;
  min-height: 5rem;
  padding: 1.25rem;
  background: var(--background-medium);
  border: none;
  border-radius: 16px;
  width: 95%;
  margin: 0 auto;
  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);
}
.dropTargetsContainer {
  display: flex;
  gap: 1.5rem; /* Changed from 2rem */
  width: 100%;
  justify-content: center;
  margin-top: 0.75rem; /* Changed from 1rem */
  padding: 0 0.75rem; /* Changed from 1rem */
}
.dropTargetColumn {
  flex: 1;
  max-width: 450px;
  min-width: 300px;
  background: var(--white);
  border: none;
  border-radius: 16px;
  padding: 1.25rem;
  height: 450px;
  display: flex;
  flex-direction: column;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}
.dropTargetColumnDraggingOver {
  background: var(--background-medium);
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
}
.dropTargetTitle {
  font-size: 1.25rem;
  margin-bottom: 1rem;
  padding: 0.75rem;
  border-radius: 8px;
  text-align: center;
  font-weight: bold;
}
.dropTargetTitleNatural {
  background: var(--success-light);
  color: var(--success-dark);
}
.dropTargetTitleManMade {
  background: var(--primary-light);
  color: var(--primary-dark);
}
.dropTargetList {
  flex: 1;
  padding: 1rem;
  background: var(--background-medium);
  border-radius: 12px;
  min-height: 300px;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
  border: none;
}
.draggableItem {
  padding: 0.75rem 1rem;
  background: var(--white);
  border: none;
  border-radius: 12px;
  display: flex;
  align-items: center;
  user-select: none;
  font-size: 1rem;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
  cursor: grab;
  transition: all 0.2s ease;
}
.draggableItem:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}
.draggableItemDragging {
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
  background: var(--white);
  transform: scale(1.02);
}
.itemCorrect {
  background: var(--success-light);
  color: var(--success-dark);
  box-shadow: 0 2px 8px rgba(76, 175, 80, 0.2);
}
.itemIncorrect {
  background: var(--error-light);
  color: var(--error-dark);
  box-shadow: 0 2px 8px rgba(239, 68, 68, 0.2);
}
.dragDropFeedback {
  margin-top: 1rem;
  padding: 0.75rem 1.5rem;
  border-radius: 8px;
  font-size: 1.1rem;
  font-weight: bold;
  text-align: center;
}
.dragDropFeedbackCorrect {
  background: var(--success-light);
  color: var(--success-dark);
  border: 1px solid var(--success-green);
}
.dragDropFeedbackIncorrect {
  background: var(--error-light);
  color: var(--error-dark);
  border: 1px solid var(--error-red);
}

/* ----- Footer Buttons ----- */

.learningFooter {
  display: flex;
  padding: 1.25rem 1.5rem;
  border-top: 1px solid var(--border-light);
  background-color: var(--white);
  justify-content: space-between;
  position: fixed;
  bottom: 0;
  width: 100%;
  z-index: 100;
}
.previousButton, .continueButton {
  padding: 12px 24px;
  border-radius: 12px;
  font-size: 16px;
  font-weight: 600;
  display: inline-flex;
  align-items: center;
  gap: 8px;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  min-width: 140px;
  justify-content: center;
  position: relative;
  overflow: hidden;
}
.previousButton {
  background-color: var(--white);
  border: 2px solid var(--border-light);
  color: var(--text-medium);
}
.previousButton:hover:not(:disabled) {
  background-color: var(--background-medium);
  border-color: var(--text-light);
  color: var(--text-dark);
  transform: translateY(-2px);
}
.previousButton:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}
.continueButton {
  background-color: #4CAF50;
  color: white;
  border: none;
  box-shadow: 0 4px 12px rgba(76, 175, 80, 0.2);
}
.continueButton:hover:not(:disabled) {
  transform: translateY(-2px);
  box-shadow: 0 6px 16px rgba(76, 175, 80, 0.3);
  background-color: #45a049;
}
.continueButton:disabled {
  background-color: var(--text-light);
  border-bottom-color: var(--text-medium);
  opacity: 0.7;
  cursor: not-allowed;
  box-shadow: none;
}

/* ----- Modals ----- */
.modalOverlay { position: fixed; top: 0; left: 0; right: 0; bottom: 0; background-color: rgba(0, 0, 0, 0.6); display: flex; align-items: center; justify-content: center; z-index: 1000; animation: fadeIn 0.2s ease-out; }
.modalContent { background-color: var(--white); border-radius: 16px; padding: 24px; max-width: 400px; width: 90%; box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2); animation: slideInModal 0.3s ease-out; }
.modalButtons { display: flex; gap: 12px; justify-content: flex-end; margin-top: 20px; }
.modalCancel, .modalConfirm { padding: 10px 16px; border-radius: 8px; font-weight: 600; cursor: pointer; font-size: var(--font-size-sm); }
.modalCancel { background-color: var(--white); border: 1px solid var(--border-light); color: var(--text-dark); }
.modalCancel:hover { background-color: var(--background-medium); }
.modalConfirm { background-color: var(--error-red); color: var(--white); border: 2px solid #b91c1c; font-weight: 700; box-shadow: 0 2px 8px rgba(220,38,38,0.10); }
.modalConfirm:hover { background-color: #dc2626; }

/* ----- Animations ----- */
@keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
@keyframes slideInModal { from { transform: translateY(-20px) scale(0.95); opacity: 0; } to { transform: translateY(0) scale(1); opacity: 1; } }
@keyframes slideUp { from { transform: translateY(100%); opacity: 0; } to { transform: translateY(0); opacity: 1; } }
@keyframes mascotBounce { 0%, 100% { transform: translateY(0); } 50% { transform: translateY(-8px); } }
@keyframes pulse { 0% { opacity: 1; } 50% { opacity: 0.7; } 100% { opacity: 1; } }

/* ----- Responsive Styles ----- */
@media (min-width: 640px) {
  .backText { display: inline; }
  .headerNavigation { flex-wrap: nowrap; }
}
@media (min-width: 768px) { 
    .mascotSpeechBubble::after { top: 20px; }
}
@media (min-width: 1024px) {
}
@media (max-width: 768px) {
  .learningContainer {
    padding: 0;
  }
  
  .learningContent {
    min-height: 100dvh;
  }
  
  .learningMain {
    padding: 1.5rem 1rem;
  }
  
  .mascotContainer {
    flex-direction: column;
    align-items: center;
  }
  
  .exampleImageContainer {
    grid-template-columns: 1fr;
    padding: 1rem;
    gap: 1rem;
  }
  
  .dropTargetsContainer {
    flex-direction: column;
    gap: 1rem;
  }
  
  .learningFooter {
    padding: 1rem;
  }
}

@media (max-width: 640px) {
  .exampleImageContainer {
      grid-template-columns: 1fr; /* Single column on mobile */
      padding: 15px;
      gap: 15px;
  }

  .exampleImage {
      height: 140px;
  }
}

/* Image Styling */
.draggableItem img {
    height: 30px;
    width: 30px;
    margin-right: 8px;
    pointer-events: none;
    object-fit: contain;
}

/* Ensure images in the source list are properly sized */
.draggableSourceList img {
    width: 30px;
    height: 30px;
    object-fit: contain;
    vertical-align: middle;
}

/* Add some hover effects to the images */
.draggableItem:hover img {
    transform: scale(1.1);
    transition: transform 0.2s ease;
}

@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.exampleImage {
    animation: fadeInUp 0.6s ease-out forwards;
    animation-delay: calc(var(--image-index, 0) * 0.1s);
}

/* Tooltip styles */
.tooltipWrapper {
    position: relative;
    display: inline-block;
    width: 100%;
}

.tooltipWrapper:before {
    content: attr(data-tooltip);
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%) translateY(-8px);
    padding: 8px 12px;
    background-color: rgba(0, 0, 0, 0.8);
    color: white;
    font-size: 14px;
    border-radius: 6px;
    white-space: nowrap;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    z-index: 1000;
    pointer-events: none;
}

.tooltipWrapper:after {
    content: '';
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    border-width: 6px;
    border-style: solid;
    border-color: rgba(0, 0, 0, 0.8) transparent transparent transparent;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    pointer-events: none;
}

.tooltipWrapper:hover:before,
.tooltipWrapper:hover:after {
    opacity: 1;
    visibility: visible;
    transform: translateX(-50%) translateY(0);
}

/* Add spring animation to example images */
@keyframes springIn {
    0% { transform: scale(0.3); opacity: 0; }
    50% { transform: scale(1.1); }
    70% { transform: scale(0.9); }
    100% { transform: scale(1); opacity: 1; }
}

.exampleImage {
    animation: springIn 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
    animation-delay: calc(var(--image-index, 0) * 0.1s);
}

.dropTargetColumn.allCorrect {
  animation: successPulse 1s ease-in-out;
  border-color: var(--success-green);
  box-shadow: 0 0 20px rgba(76, 175, 80, 0.3);
}

.dragDropFeedbackCorrect {
  background: var(--success-light);
  color: var(--success-dark);
  border: 1px solid var(--success-green);
  animation: bounceIn 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  position: relative;
}

/* Confetti container */
.confettiContainer {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1000;
}

/* Individual confetti pieces */
.confetti {
  position: absolute;
  width: 10px;
  height: 10px;
  background-color: #4CAF50;
  opacity: 0;
}

/* Generate multiple confetti pieces */
@keyframes confettiFall {
  0% {
    transform: translateY(0) rotate(0deg);
    opacity: 1;
  }
  100% {
    transform: translateY(100vh) rotate(360deg);
    opacity: 0;
  }
}

/* Success pulse animation */
@keyframes successPulse {
  0% {
    transform: scale(1);
    box-shadow: 0 0 0 0 rgba(76, 175, 80, 0.4);
  }
  50% {
    transform: scale(1.02);
    box-shadow: 0 0 20px 10px rgba(76, 175, 80, 0.2);
  }
  100% {
    transform: scale(1);
    box-shadow: 0 0 0 0 rgba(76, 175, 80, 0);
  }
}

/* Bounce in animation */
@keyframes bounceIn {
  0% {
    transform: scale(0.3);
    opacity: 0;
  }
  50% {
    transform: scale(1.1);
  }
  70% {
    transform: scale(0.9);
  }
  100% {
    transform: scale(1);
    opacity: 1;
  }
}

/* Success sparkle effect */
.dragDropFeedbackCorrect::after {
  content: '';
  position: absolute;
  top: -10%;
  left: -10%;
  right: -10%;
  bottom: -10%;
  background: radial-gradient(circle, rgba(76, 175, 80, 0.2) 0%, transparent 70%);
  animation: sparkle 2s ease-in-out infinite;
  z-index: -1;
  border-radius: inherit;
}

@keyframes sparkle {
  0% {
    transform: scale(1);
    opacity: 0;
  }
  50% {
    transform: scale(1.2);
    opacity: 0.5;
  }
  100% {
    transform: scale(1);
    opacity: 0;
  }
}

/* Add success state to items */
.itemCorrect {
  background: var(--success-light);
  color: var(--success-dark);
  box-shadow: 0 2px 8px rgba(76, 175, 80, 0.2);
  animation: successItemPop 0.4s ease-out;
  position: relative;
}

.itemCorrect::before {
  content: '✓';
  position: absolute;
  right: 10px;
  color: var(--success-green);
  font-weight: bold;
  opacity: 0;
  animation: fadeInCheck 0.3s 0.2s forwards;
}

@keyframes successItemPop {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
  100% {
    transform: scale(1);
  }
}

@keyframes fadeInCheck {
  from {
    opacity: 0;
    transform: translateX(10px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.pageContainer {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.learningContent {
  flex: 1 0 auto;
}
